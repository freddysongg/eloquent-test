# Eloquent AI Backend - Production Environment Variables
# Copy to .env.production and configure values for production deployment

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================
APP_NAME="Eloquent AI"
APP_VERSION="1.0.0"
ENVIRONMENT="production"
DEBUG="false"
RELOAD="false"

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
HOST="0.0.0.0"
PORT="8000"

# =============================================================================
# AWS CONFIGURATION
# =============================================================================
AWS_REGION="us-east-1"
AWS_SECRETS_ENABLED="true" # pragma: allowlist secret

# AWS Secrets Manager secret names (configured via Terraform)
APP_SECRETS_NAME="eloquent-ai-backend-production/app-credentials" # pragma: allowlist secret
JWT_SECRETS_NAME="eloquent-ai-backend-production/jwt-secret" # pragma: allowlist secret

# =============================================================================
# DATABASE CONFIGURATION (AWS RDS)
# =============================================================================
# Note: DATABASE_URL will be loaded from AWS Secrets Manager in production
# Format: postgresql+asyncpg://username:password@rds-endpoint:5432/database # pragma: allowlist secret
DATABASE_ECHO="false"
DATABASE_POOL_SIZE="10"
DATABASE_MAX_OVERFLOW="20"

# =============================================================================
# REDIS CONFIGURATION (AWS ElastiCache)
# =============================================================================
# Note: REDIS_URL will be loaded from AWS Secrets Manager in production
# Standard ElastiCache (single-node or replication group)
# Format: redis://elasticache-endpoint:6379/0
REDIS_SSL="false"
REDIS_CLUSTER_MODE="false"
REDIS_DB="0"

# ElastiCache Cluster Mode (if using cluster-enabled configuration)
# REDIS_SSL="true"  # Enable for in-transit encryption
# REDIS_CLUSTER_MODE="true"  # Enable for cluster mode

# =============================================================================
# AUTHENTICATION & SECURITY
# =============================================================================
# Note: These will be loaded from AWS Secrets Manager in production
# ANTHROPIC_API_KEY=  # Loaded from secrets
# PINECONE_API_KEY=   # Loaded from secrets
# CLERK_SECRET_KEY=   # Loaded from secrets
# SECRET_KEY=         # Loaded from secrets (JWT signing)

# Clerk Configuration (public keys - safe to expose)
CLERK_PUBLISHABLE_KEY="pk_live_your_production_key"
CLERK_JWT_TEMPLATE="eloquent-ai"

# =============================================================================
# AI SERVICES CONFIGURATION
# =============================================================================
CLAUDE_MODEL="claude-3-5-sonnet-20241022"
CLAUDE_MAX_TOKENS="4096"

# Pinecone Configuration (non-sensitive)
PINECONE_ENVIRONMENT="us-east-1"
PINECONE_INDEX_NAME="ai-powered-chatbot-challenge"
PINECONE_INDEX_HOST="https://ai-powered-chatbot-challenge-omkb0qa.svc.aped-4627-b74a.pinecone.io"

# Embedding Configuration
EMBEDDING_MODEL="llama-text-embed-v2"
EMBEDDING_DIMENSIONS="1024"
EMBEDDING_CACHE_TTL_SECONDS="3600"
EMBEDDING_REQUEST_TIMEOUT_SECONDS="10"

# =============================================================================
# RATE LIMITING
# =============================================================================
RATE_LIMIT_GLOBAL_REQUESTS_PER_MINUTE="1000"
RATE_LIMIT_AUTHENTICATED_REQUESTS_PER_MINUTE="100"
RATE_LIMIT_ANONYMOUS_REQUESTS_PER_MINUTE="20"
RATE_LIMIT_LLM_REQUESTS_PER_MINUTE="10"

# =============================================================================
# LOGGING & MONITORING
# =============================================================================
LOG_LEVEL="INFO"
LOG_FORMAT="json"
LOG_FILE="logs/app.log"

# Monitoring & Observability
PROMETHEUS_METRICS_ENABLED="true"
HEALTH_CHECK_ENABLED="true"
SENTRY_DSN=""  # Optional: Add Sentry DSN for error tracking

# =============================================================================
# CORS CONFIGURATION
# =============================================================================
CORS_ORIGINS='["https://app.eloquentai.com","https://eloquentai.vercel.app"]'
CORS_ALLOW_CREDENTIALS="true"
CORS_ALLOW_METHODS="GET,POST,PUT,DELETE,PATCH,OPTIONS"
CORS_ALLOW_HEADERS="Authorization,Content-Type,X-Requested-With,X-Correlation-Id"

# =============================================================================
# CELERY CONFIGURATION (Background Tasks)
# =============================================================================
CELERY_BROKER_URL="redis://localhost:6379/1"
CELERY_RESULT_BACKEND="redis://localhost:6379/2"

# =============================================================================
# WEBSOCKET CONFIGURATION
# =============================================================================
WEBSOCKET_HEARTBEAT_INTERVAL="30"
WEBSOCKET_MAX_CONNECTIONS="1000"

# =============================================================================
# PERFORMANCE SETTINGS
# =============================================================================
REQUEST_TIMEOUT_SECONDS="30"
RESPONSE_TIMEOUT_SECONDS="60"
MAX_CHAT_HISTORY_LENGTH="50"

# =============================================================================
# DEPLOYMENT-SPECIFIC CONFIGURATION
# =============================================================================

# Container Configuration (set by ECS/App Runner)
# AWS_EXECUTION_ENV=AWS_ECS_FARGATE
# ECS_CONTAINER_METADATA_URI=http://169.254.170.2/v2/metadata
# ECS_CONTAINER_METADATA_URI_V4=http://169.254.170.2/v4

# AWS IAM Role for container (managed by ECS task role)
# AWS_ROLE_ARN=arn:aws:iam::account:role/eloquent-ai-task-role

# =============================================================================
# SECURITY NOTES
# =============================================================================
#
# 1. NEVER commit actual secrets to version control
# 2. Use AWS Secrets Manager for all sensitive values in production
# 3. Environment variables marked "Loaded from secrets" are automatically
#    populated by the application from AWS Secrets Manager
# 4. Only non-sensitive configuration should be set as environment variables
# 5. Use AWS IAM roles for service authentication (no API keys in env vars)
#
# =============================================================================