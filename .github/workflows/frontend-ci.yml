name: Frontend CI/CD

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ main, dev ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "8.x"

jobs:
  # Lint and Format
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: TypeScript type checking
        run: |
          cd frontend
          npm run type-check

      - name: ESLint checking
        run: |
          cd frontend
          npm run lint

      - name: Prettier formatting check
        run: |
          cd frontend
          npm run format:check

      - name: Check for circular dependencies
        run: |
          cd frontend
          npx madge --circular --extensions ts,tsx,js,jsx .

      - name: Bundle analyzer
        run: |
          cd frontend
          npm run build
          # Check bundle size limits
          npm run analyze || echo "Bundle analysis completed"

  # Type Checking
  type-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: TypeScript compilation
        run: |
          cd frontend
          npx tsc --noEmit --incremental

      - name: Next.js type checking
        run: |
          cd frontend
          npm run build 2>&1 | tee build-output.log

          # Check for TypeScript errors in build output
          if grep -q "Type error" build-output.log; then
            echo "❌ TypeScript errors found in build"
            exit 1
          else
            echo "✅ No TypeScript errors found"
          fi

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: Run npm audit
        run: |
          cd frontend
          npm audit --audit-level=moderate

      - name: ESLint security scanning
        run: |
          cd frontend
          npx eslint . --ext .ts,.tsx,.js,.jsx \
            --format json \
            --output-file eslint-report.json \
            --plugin security \
            --rule 'security/detect-object-injection: error'

          # Display security issues
          npx eslint . --ext .ts,.tsx,.js,.jsx --plugin security

      - name: Check for sensitive data
        run: |
          cd frontend
          # Look for potential secrets or sensitive information
          if grep -r -E '(password|secret|key|token).*[=:].*(["'"'"'][^"'"'"']*["'"'"']|[A-Za-z0-9+/]{20,})' . \
            --include='*.ts' --include='*.tsx' --include='*.js' --include='*.jsx' \
            --exclude-dir=node_modules --exclude-dir=.next; then
            echo "⚠️  Potential sensitive data found - please review"
          else
            echo "✅ No obvious sensitive data patterns found"
          fi

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-security-reports
          path: |
            frontend/eslint-report.json

  # Testing
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: Run unit tests
        run: |
          cd frontend
          npm run test -- --coverage --watchAll=false --maxWorkers=2
        env:
          CI: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        with:
          file: ./frontend/coverage/clover.xml
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  # Accessibility Testing
  accessibility:
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check]

    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: Build application
        run: |
          cd frontend
          npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: Start application
        run: |
          cd frontend
          npm start &
          echo $! > app.pid

          # Wait for app to start
          sleep 10

          # Check if app is running
          if curl -f http://localhost:3000/; then
            echo "✅ Application started successfully"
          else
            echo "❌ Application failed to start"
            exit 1
          fi
        env:
          PORT: 3000

      - name: Install Playwright
        run: |
          npx playwright install --with-deps chromium

      - name: Run accessibility tests with axe-core
        run: |
          cd frontend
          npx playwright test --config=playwright-a11y.config.ts
        timeout-minutes: 10

      - name: Stop application
        if: always()
        run: |
          if [ -f frontend/app.pid ]; then
            kill $(cat frontend/app.pid) || true
            rm frontend/app.pid
          fi

      - name: Upload accessibility reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-reports
          path: |
            frontend/test-results/
            frontend/playwright-report/

  # Performance Testing
  performance:
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: Build for production
        run: |
          cd frontend
          npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: Analyze bundle size
        run: |
          cd frontend

          # Check bundle sizes
          du -sh .next/static/chunks/* | sort -hr

          # Check for large files (>2MB limit from requirements)
          find .next/static -name "*.js" -size +2M && echo "❌ Bundle exceeds 2MB limit" && exit 1 || echo "✅ Bundle size within limits"

      - name: Start application for testing
        run: |
          cd frontend
          npm start &
          echo $! > app.pid
          sleep 10
        env:
          PORT: 3000

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_SERVER_BASE_URL: ${{ secrets.LHCI_SERVER_BASE_URL }}
          LHCI_SERVER_TOKEN: ${{ secrets.LHCI_SERVER_TOKEN }}

      - name: Stop application
        if: always()
        run: |
          if [ -f frontend/app.pid ]; then
            kill $(cat frontend/app.pid) || true
            rm frontend/app.pid
          fi

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: |
            .lighthouseci/

  # E2E Testing with Playwright
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, security]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: |
          cd frontend
          npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: Start application
        run: |
          cd frontend
          npm start &
          echo $! > app.pid
          sleep 10
        env:
          PORT: 3000
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0

      - name: Run Playwright tests
        run: |
          cd frontend
          npx playwright test --browsers=chromium,firefox,webkit
        timeout-minutes: 15
        env:
          BASE_URL: http://localhost:3000

      - name: Stop application
        if: always()
        run: |
          if [ -f frontend/app.pid ]; then
            kill $(cat frontend/app.pid) || true
            rm frontend/app.pid
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: |
            frontend/playwright-report/
            frontend/test-results/

  # Docker Build
  docker-build:
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: eloquentai-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_API_URL=http://localhost:8000

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-frontend \
            -p 3000:3000 \
            eloquentai-frontend:test

          # Wait for container to start
          sleep 15

          # Test if the container is responding
          if curl -f http://localhost:3000/; then
            echo "✅ Frontend container started successfully"
            docker logs test-frontend
            docker stop test-frontend
          else
            echo "❌ Frontend container failed to respond"
            docker logs test-frontend
            docker stop test-frontend
            exit 1
          fi

  # Visual Regression Testing
  visual-tests:
    runs-on: ubuntu-latest
    needs: [accessibility]
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit

      - name: Build application
        run: |
          cd frontend
          npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: Start application
        run: |
          cd frontend
          npm start &
          echo $! > app.pid
          sleep 10
        env:
          PORT: 3000

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Run visual regression tests
        run: |
          cd frontend
          npx playwright test --config=playwright-visual.config.ts

      - name: Stop application
        if: always()
        run: |
          if [ -f frontend/app.pid ]; then
            kill $(cat frontend/app.pid) || true
            rm frontend/app.pid
          fi

      - name: Upload visual test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/

  # Summary Job
  frontend-ci-summary:
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, security, test, accessibility, performance, e2e-tests, docker-build]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          echo "Frontend CI/CD Summary:"
          echo "======================="
          echo "Lint and Format: ${{ needs.lint-and-format.result }}"
          echo "Type Check: ${{ needs.type-check.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Accessibility: ${{ needs.accessibility.result }}"
          echo "Performance: ${{ needs.performance.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"

          # Check if any required job failed
          if [[ "${{ needs.lint-and-format.result }}" == "failure" || \
                "${{ needs.type-check.result }}" == "failure" || \
                "${{ needs.security.result }}" == "failure" || \
                "${{ needs.test.result }}" == "failure" || \
                "${{ needs.accessibility.result }}" == "failure" || \
                "${{ needs.performance.result }}" == "failure" || \
                "${{ needs.e2e-tests.result }}" == "failure" || \
                "${{ needs.docker-build.result }}" == "failure" ]]; then
            echo "❌ Frontend CI/CD failed - check individual jobs"
            exit 1
          else
            echo "✅ All frontend CI/CD checks passed!"
          fi
