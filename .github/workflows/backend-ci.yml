name: Backend CI/CD

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'backend/**'
      - 'docker-compose.yml'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, dev ]
    paths:
      - 'backend/**'
      - 'docker-compose.yml'
      - '.github/workflows/backend-ci.yml'

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"
  REGISTRY: ghcr.io

jobs:
  # Static Analysis and Linting
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Poetry installation
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pypoetry
          key: poetry-${{ env.POETRY_VERSION }}-${{ runner.os }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          cd backend
          poetry install --no-interaction --no-ansi

      - name: Code formatting with Black
        run: |
          cd backend
          poetry run black --check --diff app/ --line-length 100

      - name: Import sorting with isort
        run: |
          cd backend
          poetry run isort --check-only --diff app/

      - name: Linting with Flake8
        run: |
          cd backend
          poetry run flake8 app/ --max-line-length=100 --extend-ignore=E203,W503

      - name: Code quality with pylint
        continue-on-error: true
        run: |
          cd backend
          poetry run pylint app/ --disable=R,C --fail-under=8.0

  # Type Checking
  type-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: |
          cd backend
          poetry install --no-interaction

      - name: Type checking with MyPy
        run: |
          cd backend
          poetry run mypy app/ --ignore-missing-imports --strict-optional --warn-redundant-casts --warn-unused-ignores

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: |
          cd backend
          poetry install --no-interaction

      - name: Security analysis with Bandit
        run: |
          cd backend
          poetry run bandit -r app/ -f json -o bandit-report.json
          poetry run bandit -r app/ -ll

      - name: Check for known security vulnerabilities with Safety
        run: |
          cd backend
          poetry run safety check --json --output safety-report.json || true
          poetry run safety check

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            backend/bandit-report.json
            backend/safety-report.json

  # Testing
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: |
          cd backend
          poetry install --no-interaction

      - name: Validate environment variables
        run: |
          cd backend
          echo "Checking required environment variables..."
          python -c "
          import os
          required_vars = ['DATABASE_URL', 'REDIS_URL', 'CLAUDE_API_KEY', 'PINECONE_API_KEY']
          missing_vars = [var for var in required_vars if not os.getenv(var, '').strip()]
          if missing_vars:
              print(f'Warning: Missing environment variables for testing: {missing_vars}')
          else:
              print('All required environment variables are set')
          "
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          CLAUDE_API_KEY: test-key
          PINECONE_API_KEY: test-key

      - name: Run database migrations
        run: |
          cd backend
          poetry run alembic upgrade head
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

      - name: Run unit tests with coverage
        run: |
          cd backend
          poetry run pytest app/tests/ \
            --cov=app \
            --cov-report=term-missing \
            --cov-report=xml:coverage.xml \
            --cov-report=html:htmlcov \
            --cov-fail-under=80 \
            --maxfail=1 \
            -v
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          CLAUDE_API_KEY: test-key
          PINECONE_API_KEY: test-key
          ENVIRONMENT: testing

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, security]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: |
          cd backend
          poetry install --no-interaction

      - name: Run API integration tests
        run: |
          cd backend
          poetry run pytest app/tests/integration/ -v
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY || 'test-key' }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY || 'test-key' }}
          ENVIRONMENT: testing

      - name: Performance benchmark tests
        run: |
          cd backend
          poetry run python -c "
          import asyncio
          import time
          import httpx

          async def benchmark_health_check():
              async with httpx.AsyncClient() as client:
                  times = []
                  for _ in range(10):
                      start = time.time()
                      response = await client.get('http://localhost:8000/health')
                      end = time.time()
                      times.append((end - start) * 1000)

                  avg_time = sum(times) / len(times)
                  print(f'Average response time: {avg_time:.2f}ms')

                  if avg_time > 200:
                      print('WARNING: Response time exceeds 200ms threshold')
                      exit(1)
                  else:
                      print('✅ Performance test passed')

          # This would run if the server was started
          print('Performance benchmark test placeholder - would test <200ms requirement')
          "

  # Docker Build and Security
  docker-security:
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: eloquentai-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: eloquentai-backend:test
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Test Docker image startup
        run: |
          docker run --rm -d --name test-backend \
            -p 8000:8000 \
            -e DATABASE_URL=sqlite:///./test.db \
            -e REDIS_URL=redis://localhost:6379 \
            -e ENVIRONMENT=testing \
            eloquentai-backend:test

          # Wait for container to start
          sleep 10

          # Check if container is running
          if docker ps | grep test-backend; then
            echo "✅ Container started successfully"
            docker logs test-backend
            docker stop test-backend
          else
            echo "❌ Container failed to start"
            docker logs test-backend
            exit 1
          fi

  # Summary Job
  backend-ci-summary:
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, security, test, integration-tests, docker-security]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          echo "Backend CI/CD Summary:"
          echo "====================="
          echo "Lint and Format: ${{ needs.lint-and-format.result }}"
          echo "Type Check: ${{ needs.type-check.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Docker Security: ${{ needs.docker-security.result }}"

          # Check if any required job failed
          if [[ "${{ needs.lint-and-format.result }}" == "failure" || \
                "${{ needs.type-check.result }}" == "failure" || \
                "${{ needs.security.result }}" == "failure" || \
                "${{ needs.test.result }}" == "failure" || \
                "${{ needs.integration-tests.result }}" == "failure" || \
                "${{ needs.docker-security.result }}" == "failure" ]]; then
            echo "❌ Backend CI/CD failed - check individual jobs"
            exit 1
          else
            echo "✅ All backend CI/CD checks passed!"
          fi
